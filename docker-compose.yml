version: '3.8'

services:
  # RabbitMQ Message Broker
  rabbitmq:
    image: rabbitmq:3.12-management
    container_name: solomon-rabbitmq
    hostname: rabbitmq
    ports:
      - "5672:5672"   # AMQP protocol
      - "15672:15672" # Management UI
    environment:
      - RABBITMQ_DEFAULT_USER=admin
      - RABBITMQ_DEFAULT_PASS=admin123
      - RABBITMQ_DEFAULT_VHOST=/
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
      - ./rabbitmq/logs:/var/log/rabbitmq
    networks:
      - solomon-network
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 40s

  # IP Generator Microservice
  ip-generator:
    build:
      context: ./ip-generator
      dockerfile: Dockerfile
    container_name: solomon-ip-generator
    hostname: ip-generator
    ports:
      - "8080:8080"
    environment:
      - RABBITMQ_URL=amqp://admin:admin123@rabbitmq:5672/
      - RABBITMQ_QUEUE=ip_queue
      - SERVER_HOST=0.0.0.0
      - SERVER_PORT=8080
      - LOG_LEVEL=info
    volumes:
      - ./ip-generator/config.yaml:/app/config.yaml:ro
      - ./logs/ip-generator:/app/logs
    networks:
      - solomon-network
    depends_on:
      rabbitmq:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # MongoDB Database
  mongodb:
    image: mongo:7.0
    container_name: solomon-mongodb
    hostname: mongodb
    ports:
      - "27017:27017"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=admin
      - MONGO_INITDB_ROOT_PASSWORD=admin123
      - MONGO_INITDB_DATABASE=solomon
    volumes:
      - mongodb_data:/data/db
      - ./mongodb/init:/docker-entrypoint-initdb.d:ro
    networks:
      - solomon-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 40s

  # Port Scanner Microservice
  port-scanner:
    build:
      context: ./port-scanner
      dockerfile: Dockerfile
    container_name: solomon-port-scanner
    hostname: port-scanner
    ports:
      - "8081:8081"
    environment:
      - RABBITMQ_URL=amqp://admin:admin123@rabbitmq:5672/
      - RABBITMQ_IP_QUEUE=ip_queue
      - RABBITMQ_SCAN_RESULT_QUEUE=scan_result_queue
      - RABBITMQ_ENRICHMENT_QUEUE=enrichment_queue
      - RABBITMQ_SERVICE_ANALYSIS_QUEUE=service_analysis_queue
      - MONGODB_CONNECTION_STRING=mongodb://admin:admin123@mongodb:27017/solomon?authSource=admin
      - MONGODB_DATABASE_NAME=solomon
      - MONGODB_COLLECTION_NAME=scan_results
      - MONGODB_ENABLE_DATABASE=true
      - SERVER_HOST=0.0.0.0
      - SERVER_PORT=8081
      - LOG_LEVEL=info
      - SCAN_TIMEOUT=30s
      - BANNER_TIMEOUT=10s
      - CONCURRENCY=50
      - ZGRAB_CONCURRENCY=10
    volumes:
      - ./port-scanner/config.yaml:/app/config.yaml:ro
      - ./logs/port-scanner:/app/logs
    networks:
      - solomon-network
    depends_on:
      rabbitmq:
        condition: service_healthy
      mongodb:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    # Port scanner needs additional capabilities for network scanning
    cap_add:
      - NET_ADMIN
      - NET_RAW
    security_opt:
      - no-new-privileges:true

  # Optional: Nginx reverse proxy for load balancing
  nginx:
    image: nginx:alpine
    container_name: solomon-nginx
    hostname: nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    networks:
      - solomon-network
    depends_on:
      - ip-generator
      - port-scanner
    restart: unless-stopped

volumes:
  rabbitmq_data:
    driver: local
  mongodb_data:
    driver: local
  redis_data:
    driver: local

networks:
  solomon-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16 